function copyState(state) {
    const boardLength = state.length;
    let newState = new Array(boardLength);
    for (var i = 0; i < boardLength; i++) {
        newState[i] = new Array(boardLength);
        for (var j = 0; j < boardLength; j++) newState[i][j] = -1;
    }
    for (let i = 0; i < boardLength; i++) {
        for (let j = 0; j < boardLength; j++) {
            newState[i][j] = state[i][j];
        }
    }
    return newState;
}

function copyStateOld(state) {
    const boardLength = state.length;
    let newState = [];
    for (let i = 0; i < boardLength; i++) {
        newState.push([]);
        for (let j = 0; j < boardLength; j++) {
            newState[i].push(state[i][j]);
        }
    }
    return newState;
}

let state = [
    [
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1,
        -1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1,
    ],
    [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 1,
    ],
];

console.time("new");
for (let i = 0; i < 100000; i++) {
    copyState(state);
}
console.timeEnd("new");

console.time("old");
for (let i = 0; i < 100000; i++) {
    copyStateOld(state);
}
console.timeEnd("old");
